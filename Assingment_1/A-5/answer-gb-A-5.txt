Answers
-------

	1) Yes I noticed that. This is more like the SSA form I was expecting. Maybe (D) means 
	it's missing a definition. (e.g. c is undefined in its use in the first conditional).
	Variables that are  likely to be used  before any
	assignment are suffixed  with `(D)' to indicate  that the assignment
	was implicit in the declaration.  This happens to both uninitialized
	local variables and formal parameters.  For example, variable `c' is
	used as `c_4(D)' in the `if' condition.

	2) Syntax of PHI statements is probably PHI < prec_1, prec_2, ... prec_n > where
   	prec_i is name(bb) - name being the name of the variable and bb the number of
   	the basic block in which it was declared. There will be a prec_i for each
   	preceding BB from which control flow can enter the current BB.
			# a_1 = PHI <a_5(3), a_7(4)> 
			
	3) I think this could come from a switch statement or cascading if-else blocks.
	int main()
            {
                int a, b;
                switch (a)
                {
                    case 1:
                        b = 2;
                        break;
                    case 2:
                        b = 3;
                        break;
                    case 3:
                        b = 4;
                    case 4:
                        b = 5;
                        break;
                    case 5:
                    case 6:
                        b = 6;
                        break;
                    default:
                        b = 7;
                }
                return b;
            }
            
            In this case  the PHI node at  the end of the  switch statement will
            merge multiple assignments such as:
			 # b_1 = PHI <b_4(3), b_5(4), b_7(6), b_8(7), b_9(8)>

